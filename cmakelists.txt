
cmake_minimum_required(VERSION 3.14)
project(fastnoise VERSION 1.0.0 LANGUAGES CXX)

# Create a target for FastNoiseSIMD
add_library(${PROJECT_NAME} STATIC)

# Specify the source files for the library
file(GLOB CPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/FastNoiseSIMD/*.cpp)
target_sources(${PROJECT_NAME}
    PRIVATE
        FastNoiseSIMD/FastNoiseSIMD_internal.cpp
        FastNoiseSIMD/FastNoiseSIMD.cpp
)

# Specify the header files
target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:include>
)

# Specify C++ standard
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_20)

# Add alias to access the target with namespace
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

# Installation rules
include(GNUInstallDirs)

# Install the target and headers
install(TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}Targets
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}  # For Windows DLLs
)

install(
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/FastNoiseSIMD
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/FastNoiseSIMD
    FILES_MATCHING
        PATTERN "*.h"
        # PATTERN "*_internal.h" EXCLUDE
)

# Export target for find_package usage
install(EXPORT ${PROJECT_NAME}Targets
    FILE ${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

# Generate the Config file for find_package
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

# configure_package_config_file(
#     ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in
#     ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
#     INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
# )

# install(FILES
#     ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
#     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
# )

# Export the build tree for development usage
export(EXPORT ${PROJECT_NAME}Targets
    FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
)
